#include <ilcplex/ilocplex.h>
ILOSTLBEGIN


IloEnv env;
int n,m;
double Ba,Bp;
typedef IloArray<IloNumArray> DataMatrix;
DataMatrix Ha,Ca,Hp,Cp;

typedef IloArray<IloBoolVarArray> BoolVarMatrix;
typedef IloArray<IloNumVarArray> NumVarMatrix;

//matrice à 3 dim pour les hauteurs:
typedef IloArray<BoolVarMatrix> BoolVarMatrix3;
 
void getData(const char* nom_fichier) {
	char char1;
	double tmp;
	
	ifstream fichier(nom_fichier);
	if(fichier) {
		//pour n
		fichier >> char1 >> char1 >> n >> char1;
		cout <<"n="<< n<<"\n";
		//pour m
		fichier >> char1 >> char1 >> m >>char1;
		cout <<"m="<< m<<"\n";

		//pour Ba, si existe!
		fichier >> char1 ;
		if(char1=='B'){//then Ba est définie, et Bp aussi
		  fichier >> char1 >> char1>>Ba >>char1;
		  cout <<"Ba="<< Ba<<"\n";

		  //pour Bp
		  fichier >> char1 >> char1 >>char1 >> Bp >>char1;
		
		  
		// Ha
		fichier >> char1 >> char1 >> char1 >> char1; // lit H a = [       
		}
		else if(char1=='H'){	fichier >> char1 >> char1 >> char1; // le 'H' a été lu, on lit " a = ["
		}
		else cout << "Problème de lecture de l'instance, données non conforme au modèle...\n";
		Ha=DataMatrix(env,m); // M est une matrice carrée à n lignes et n colonnes


		for(int i=0;i<m;i++) {
			fichier >> char1 ; // lit le [ de la ligne
			Ha[i]=IloNumArray(env); // On initialise la ième ligne de M
			for(int j=0;j<n;j++) {
				fichier >> tmp >> char1;
				// Chaque ligne du fichier contient n fois le motif suivant :
				// un entier suivi d’un caractère ("," ou "]" a la fin)
				Ha[i].add(tmp); // On ajoute l’entier lu à la ième ligne de M
			}
			fichier >> char1;//lit ",", Fin de la lecture de la ième ligne de M
		}
		fichier >> char1; //lit ; a la fin de E
		cout<< "Ha=" << Ha << "\n";

		// Ca
		Ca=DataMatrix(env,m); // M est une matrice carrée à n lignes et n colonnes
		fichier >> char1 >> char1 >> char1 >> char1; // lit C a = [

		for(int i=0;i<m;i++) {
			fichier >> char1 ; // lit le [ de la ligne
			Ca[i]=IloNumArray(env); // On initialise la ième ligne de M
			for(int j=0;j<n;j++) {
				fichier >> tmp >> char1;
				// Chaque ligne du fichier contient n fois le motif suivant :
				// un entier suivi d’un caractère ("," ou "]" a la fin)
				Ca[i].add(tmp); // On ajoute l’entier lu à la ième ligne de M
			}
			fichier >> char1;//lit ",", Fin de la lecture de la ième ligne de M
		}
		fichier >> char1; //lit ; a la fin du tableau
		cout<< "Ca=" << Ca << "\n";

		// Hp
		Hp=DataMatrix(env,m); // M est une matrice carrée à n lignes et n colonnes
		fichier >> char1 >> char1 >> char1 >> char1; // lit C a = [

		for(int i=0;i<m;i++) {
			fichier >> char1 ; // lit le [ de la ligne
			Hp[i]=IloNumArray(env); // On initialise la ième ligne de M
			for(int j=0;j<n;j++) {
				fichier >> tmp >> char1;
				// Chaque ligne du fichier contient n fois le motif suivant :
				// un entier suivi d’un caractère ("," ou "]" a la fin)
				Hp[i].add(tmp); // On ajoute l’entier lu à la ième ligne de M
			}
			fichier >> char1;//lit ",", Fin de la lecture de la ième ligne de M
		}
		fichier >> char1; //lit ; a la fin du tableau
		cout<< "Hp=" << Hp << "\n";

		// Cp
		Cp=DataMatrix(env,m); // M est une matrice carrée à n lignes et n colonnes
		fichier >> char1 >> char1 >> char1 >> char1; // lit C p = [

		for(int i=0;i<m;i++) {
			fichier >> char1 ; // lit le [ de la ligne
			Cp[i]=IloNumArray(env); // On initialise la ième ligne de M
			for(int j=0;j<n;j++) {
				fichier >> tmp >> char1;
				// Chaque ligne du fichier contient n fois le motif suivant :
				// un entier suivi d’un caractère ("," ou "]" a la fin)
				Cp[i].add(tmp); // On ajoute l’entier lu à la ième ligne de M
			}
			fichier >> char1;//lit ",", Fin de la lecture de la ième ligne de M
		}
		fichier >> char1; //lit ; a la fin du tableau
		cout<< "Cp=" << Cp << "\n";

		fichier.close();
	}
}


static void
setdata (IloModel model, BoolVarMatrix  x, NumVarMatrix u,  NumVarMatrix v,IloNumVar y,IloNumVar z, IloRangeArray constraintSet)
{
   //Calcul des bornes Ma et Mp
   double Ma=1;
   double Mp=1;
   cout << "Calcul des bornes..\n";
   for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){
	if((Cp[i][j]>0) &&(1.0/Mp > Cp[i][j])) Mp=1.0/Cp[i][j];
       	if((Ca[i][j]>0) &&(1.0/Ma > Ca[i][j])) Ma=1.0/Cp[i][j];
      }
   }
   cout<< "Bornes Ma=" << Ma <<" et Mp=" << Mp <<".\n";
  
 //ATTENTION : certaines cases (i,j) ne correspondent à rien en réalité, et on a alors Ca(i,j)=Cp(i,j)=0. On fixe alors xij==0
   for(int i=0; i<m; i++){
     for(int j=0; j<n; j++){
       if((Ca[i][j]==0) && (Cp[i][j]==0)){
	 constraintSet.add(x[i][j]==0); //fixe les variables sans réalité à 0
       }
     }
   }
   
   cout << "Variables xij ne correspondant pas à des cases réelles fixées à 0.\n";

   //contraintes linéaires (5)
   IloExpr conLin5p(env);
   IloExpr conLin5a(env);
   for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){ 
	if((Ca[i][j]>0) && (Cp[i][j]>0)){ //on verifie que la case existe ici
	  u[i][j]=IloNumVar(env, 0.0);
	  v[i][j]=IloNumVar(env, 0.0);
	  conLin5p += Cp[i][j] * u[i][j];
	  conLin5a += Ca[i][j] * v[i][j];
	}
      }
   }
   
   constraintSet.add(conLin5a ==1);
   constraintSet.add(conLin5p ==1);

   cout << "Contrainte 5 ajoutée.\n";

   //contraintes linéaires (6,7,8,9)
   y=IloNumVar(env,0.0);
   z=IloNumVar(env,0.0);

   for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){ 
	if((Ca[i][j]>0) && (Cp[i][j]>0)){ //on verifie que la case existe ici
	    IloExpr conLin6p(env);  
	    IloExpr conLin6a(env);
	    IloExpr conLin7p(env);  
	    IloExpr conLin7a(env);
	    IloExpr conLin8p(env);  
	    IloExpr conLin8a(env);
	    IloExpr conLin9p(env);  
	    IloExpr conLin9a(env);
	    conLin6p = u[i][j]-x[i][j]*Mp;
	    constraintSet.add(conLin6p<=0);
	    conLin6a = v[i][j]-x[i][j]*Ma;
	    constraintSet.add(conLin6a<=0);
	    
	    conLin7p =u[i][j]-y ;
	    constraintSet.add(conLin7p<=0);
	    conLin7a =v[i][j]-z ;
	    constraintSet.add(conLin7a<=0);

	    conLin8p =u[i][j]-(x[i][j]-1)*Mp-y;
	    constraintSet.add(conLin8p>=0);
	    conLin8a =v[i][j]-(x[i][j]-1)*Ma-z;
	    constraintSet.add(conLin8a>=0);

	       conLin5a.end();
	       conLin5p.end();
	       conLin6a.end();
	       conLin6p.end();
	       conLin7a.end();
	       conLin7p.end();
	       conLin8a.end();
	       conLin8p.end();
	}  
      }
   }
   cout <<"Contraintes 6,7,8,9 ajoutées.\n";

   // contraine du critère linéarisée (10)
   IloExpr conLin10(env);
 for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){ 
	if((Ca[i][j]>0) && (Cp[i][j]>0)){ //on verifie que la case existe ici
	  conLin10+=Hp[i][j]*Cp[i][j]*u[i][j]+Ha[i][j]*Ca[i][j]*v[i][j];
	}
      }
 }
 constraintSet.add(conLin10>=2);
 cout << "Contrainte 10 ajoutée."<<endl;


 // Objective Function
 IloExpr sumX(env);
 for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){ 
	if((Ca[i][j]>0) && (Cp[i][j]>0)){ //on verifie que la case existe ici
	  sumX+= x[i][j];
	}}}

   model.add(IloMaximize(env, sumX));

   model.add(constraintSet);

   sumX.end();
   conLin10.end();


}

 //Connexity constraints

static void
setConnexityConstraints(IloModel model, BoolVarMatrix  x, BoolVarMatrix3 height, IloExprArray lhsCallback, IloNumArray rhsCallback,  IloRangeArray constraintSet,IloRangeArray connexityConstraintSet){


 //Contrainte (11)- une et une seule racine
 IloExpr sumH(env);
 for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){ 
	if((Ca[i][j]>0) && (Cp[i][j]>0)){ //on verifie que la case existe ici
	  sumH+= height[i][j][0];
	}}}
 connexityConstraintSet.add(sumH==1);
 sumH.end();

 cout <<"Contrainte 11 ajoutée."<<endl;

 //Contrainte (12) (n*m contraintes) seules les cases selectionées ont une hauteur, celles vides n'ont pas de hauteur
 for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){ 
	  IloExpr sumHij(env);
	  for(int h=0; h<height[i][j].getSize();h++){
	    sumHij+=height[i][j][h];
	  }
	  sumHij+=-x[i][j];
	  connexityConstraintSet.add(sumHij==0);
	  sumHij.end();
	      }
 }
 cout <<"Contrainte 12 ajoutée." <<endl;

 //Contrainte (13) Connexity constraints for Callback -> (O(n²m²)contraintes)

 for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){ 
	if((Ca[i][j]>0) && (Cp[i][j]>0)){
	  for(int h=0;h<height[i][j].getSize()-1;h++){
	    IloExpr lhsExprLijh(env);
	    lhsExprLijh+=height[i][j][h+1];
	    //verifie que l'on n'est pas sur les cotés du carré à chaque ajout de variable:
	    if(i>0)lhsExprLijh+=-height[i-1][j][h];
	    if(i<m-1)lhsExprLijh+=-height[i+1][j][h];
	    if(j>0)lhsExprLijh+=-height[i][j-1][h];
	    if(j<n-1)lhsExprLijh+=-height[i][j+1][h];
	    lhsCallback.add(lhsExprLijh);
	    rhsCallback.add(0.0);
	  }
	}
      }
 }
 // model.add(connexityConstraintSet); //constraints added in main

}

ILOLAZYCONSTRAINTCALLBACK3(CtCallback, IloExprArray, lhsCallback, IloNumArray, rhsCallback, IloNum, eps) {
   IloInt lhsSize = lhsCallback.getSize();
   for (IloInt i = 0; i < lhsSize; i++) {
      IloNum xrhs = rhsCallback[i];
      if ( xrhs < IloInfinity  &&  getValue(lhsCallback[i]) > xrhs + eps ) {
         IloRange cut;
         try {
            cut = (lhsCallback[i] <= xrhs);
            add(cut).end();
            rhsCallback[i] = IloInfinity;
         }
         catch (...) {
            cut.end();
            throw;
         }
      }
   }
}


int main (int argc, char* argv[]) {
   
  //get instance fileName:
  const char*  fileName;
  if(argc>1)//we passed the filename in arg
    fileName=argv[1];
  else fileName = "instances/projet_5_8_1.dat";
  
  getData(fileName);
  cout << "Données récupérées!\n";
   try {
     
      IloModel model(env);

      BoolVarMatrix x(env,m);
      for(int i=0;i<m;i++) x[i]=IloBoolVarArray(env,n);

      NumVarMatrix u(env,m);
      for(int i=0;i<m;i++) u[i]=IloNumVarArray(env,n);

      NumVarMatrix v(env,m);
      for(int i=0;i<m;i++) v[i]=IloNumVarArray(env,n);

      IloRangeArray constraintSet(env);
      
      IloNumVar y(env);

      IloNumVar z(env);
      cout << "Variables créées!\n";

      setdata (model, x,u,v,y,z, constraintSet);
      cout << " Modèle et contraintes définies!\n";

      
      IloCplex cplex(model);

      cplex.solve();
      
      IloInt solutionUnConnex;
      solutionUnConnex=cplex.getObjValue();
      cout << "\nSolution non connexe optimale de valeur : "<<solutionUnConnex<<endl<<endl;
      
      //We solve a first time the model without the connexity constraints, to get a good max bound of the height max : the value of the solution/2, then we add the connexity constraints :
      
      IloRangeArray connexityConstraintSet(env);

      BoolVarMatrix3 height(env,m);
      
      IloInt hMax;
      if(argc>2){ // we gave the hmax in argument/
	istringstream (argv[2])>>hMax;
        if(hMax==0)  hMax=solutionUnConnex/2+1;
	  } //else we use our upper bound
      else hMax=solutionUnConnex/2+1;//(n*m/2+n/2);
      
      cout << "Valeur maximale de la hauteur de l'arbre de connexité hMax= " << hMax <<endl;
      for(int i=0;i<m;i++) {
	height[i]=BoolVarMatrix(env,n);
	for(int j=0;j<n;j++){
	  height[i][j]=IloBoolVarArray(env,hMax);
	}
      }
      
      IloExprArray lhsCallback(env);
      IloNumArray rhsCallback(env); 

      setConnexityConstraints(model, x,height,lhsCallback,rhsCallback, constraintSet,connexityConstraintSet);
      cout<< "\nContraintes de connexité ajoutées!\n\n";
      
      bool useCallBack;
      if(argc>3 && *argv[3]=='0')  useCallBack= false;
      else useCallBack= true;

      if(useCallBack) {
	  cplex.use(CtCallback(env, lhsCallback, rhsCallback, 0.5));
	  cout << "eps parameter for cut callback is : "<<  cplex.getParam(IloCplex::EpRHS);
	  cplex.setParam(IloCplex::MIPInterval,1000);//display results
	  cplex.setParam(IloCplex::MIPSearch,IloCplex ::Traditional);
	   cplex.setParam(IloCplex::CutsFactor, 1.0);//no cuts generated (problem can t grow more than once with the cuts)
	  cplex.setParam(IloCplex::EachCutLim,0); //no cuts generated
	   cplex.setParam(IloCplex::PreInd,0);//allow cplex to presolve
      
	   cplex.extract(model);
      }

      else{ for(int i=0;i<lhsCallback.getSize();i++){
	      connexityConstraintSet.add(lhsCallback[i]<=0);
	      	    }
      }
      model.add(connexityConstraintSet);
      cplex.solve();

      env.out() << "Solution status = " << cplex.getStatus() << endl;
      env.out() << "Solution value  = " << cplex.getObjValue() << endl;

      
      env.out() << "Values  of x      = " << endl;
      for(int i=0;i<m;i++){
	IloNumArray vals(env,n);
	  cplex.getValues(vals, x[i]);
	  cout<<vals<<endl;
      }
      env.out()<<"\nValues of height given to the solution :\n";
      for(int i=0; i<m; i++){
	cout<<"[";
      for(int j=0; j<n; j++){ 
	if(cplex.getValue(x[i][j])==1){
	  for(int h=0;h<hMax;h++){
	    if(cplex.getValue(height[i][j][h])==1) cout << h<<";" ;
	  }
	}
	else cout<< "#;";
      }
      cout << "]"<<endl; //end of line i
      }
      cout <<endl;

      /* env.out()<< "Value of y = "<< cplex.getValue(y)<<endl;
      // env.out()<< "Value of z = "<< cplex.getValue(z)<<endl;

      env.out() << "Values  of u      = " << endl;
      for(int i=0;i<m;i++){
	IloNumArray vals(env,n);
	cout << u[0][0];
	  cplex.getValues(vals, u[i]);
	  cout<<vals<<endl;
      }
      env.out() << "Values  of v      = "  << endl;
      for(int i=0;i<m;i++){
	  IloNumArray vals(env);
	  cplex.getValues(vals, v[i]);
	  cout<<vals<<endl;
	  }*/
      
     
      // cplex.getSlacks(vals, constraintSet);
      //env.out() << "Slacks        = " << vals << endl;

      cplex.exportModel("pl.lp");
      }
   catch (IloException& e) {
      cerr << "Concert exception caught: " << e << endl;
      cout << "Aucune maille ne peut etre selectionnée pour obtenir une solution admissible...\n";
      if(argc>2){//then we used the hmax given in argument, so :
	cout<<" hMax was given, try using calculated upper bound on hMax (without passing it as an argument.\n\n";
      } 
   }
   catch (...) {
      cerr << "Unknown exception caught" << endl;
      }

   env.end();
   return 0;

}  
