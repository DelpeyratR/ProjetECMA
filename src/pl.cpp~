#include <ilcplex/ilocplex.h>
ILOSTLBEGIN


IloEnv env;
int n,b,e;
IloNumArray a = IloNumArray(env);
IloNumArray d = IloNumArray(env);
IloNumArray c = IloNumArray(env);


void getData(char nom_fichier[]) {
	char char1;
	int tmp;
	ifstream fichier(nom_fichier);
	if(fichier) {
		//pour n
		fichier >> char1 >> char1 >> n >> char1;
		//pour c
		fichier >> char1 >> char1 >>char1;
		for(int i=0;i<n;i++) {
			fichier >> tmp >> char1;
			c.add(tmp);
		}
		fichier >> char1;
		//pour a
		fichier >> char1 >> char1 >>char1;
		for(int i=0;i<n;i++) {
			fichier >> tmp >> char1;
			a.add(tmp);
		}
		fichier >> char1;
		//pour b
		fichier >> char1 >> char1 >> b >> char1;

		//pour d
		fichier >> char1 >> char1 >>char1;
		for(int i=0;i<n;i++) {
			fichier >> tmp >> char1;
			d.add(tmp);
		}
		fichier >> char1;
		//pour e
		fichier >> char1 >> char1 >> e >> char1;

		fichier.close();
	}
}

static void
setdata (IloModel model, IloBoolVarArray x, IloRangeArray con)
{
   IloEnv env = model.getEnv();

   IloExpr cx(env);
   for(int i=0; i < n; i++)
	   cx += c[i]*x[i];
   cout << "COUCOCUOUCOUCOCUUO" << endl;
   IloExpr ax(env);
   for(int i=0; i < n; i++)
   	   ax += a[i]*x[i];
  IloExpr dx(env);
  for(int i=0; i < n; i++)
	 dx += d[i]*x[i];
   model.add(IloMaximize(env, cx));
   con.add( ax == b);
   con.add( dx <= e);
   model.add(con);
   cx.end();
   dx.end();
   ax.end();

}
 
int main (void) {
   IloEnv env;
   getData("plne5.dat");
   try {
      IloModel model(env);

      IloBoolVarArray var(env,n);
      IloRangeArray con(env);
      setdata (model, var, con);

      IloCplex cplex(model);
      cplex.solve();

      env.out() << "Solution status = " << cplex.getStatus() << endl;
      env.out() << "Solution value  = " << cplex.getObjValue() << endl;

      IloNumArray vals(env);
      cplex.getValues(vals, var);
      env.out() << "Values        = " << vals << endl;
      cplex.getSlacks(vals, con);
      env.out() << "Slacks        = " << vals << endl;

      cplex.exportModel("pl.lp");
   }
   catch (IloException& e) {
      cerr << "Concert exception caught: " << e << endl;
   }
   catch (...) {
      cerr << "Unknown exception caught" << endl;
   }

   env.end();
   return 0;

}  
